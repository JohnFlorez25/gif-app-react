{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"yLAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmBhD,OACA,0BAAMC,SAZe,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAOlB,2BACIO,KAAK,OACLC,MAAQT,EACRU,SApBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAKFI,MAAMF,GALJ,cAKfG,EALe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbjB,kBAiBdM,GAjBc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCDGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAXAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GAEpBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAId,CAACpB,IAEGqB,EDbmBK,CAAc1B,GAAhCO,EAF+B,EAE/BA,KAAMa,EAFyB,EAEzBA,QAMd,OACE,oCACE,wBAAIJ,UAAU,0CAA0ChB,GAEtDoB,GAAW,uBAAGJ,UAAU,oCAAb,cACb,yBAAKA,UAAU,aACZT,EAAKE,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEhB3BkB,EAAe,WAAM,MAII1C,mBAAS,CAAC,cAJd,mBAIzB2C,EAJyB,KAIb5C,EAJa,KAWhC,OACE,oCACE,2CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BACG4C,EAAWpB,KAAI,SAACT,EAAU8B,GAAX,OACZ,kBAAC,EAAD,CACIH,IAAG,mBAAcG,GACjB9B,SAAaA,UCpB7B+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.6a1d63e6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2){\n            setCategories( cats => [inputValue, ...cats] );\n            setInputValue('');\n        }\n        \n    }\n\n    return ( \n    <form onSubmit={handleSubmit}>\n        <input \n            type=\"text\"\n            value={ inputValue }\n            onChange={ handleInputChange }\n        />\n    </form> );\n}\n \nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=WaV8ApPVhZQOY6ld6MTNBkDuybgzLHYB`;\n\n  const resp = await fetch(url);\n\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\n\nexport const GifGrid = ({ category }) => {\n  // const [images, setImages] = useState([]);\n  const { data, loading } = useFetchGifs( category );\n  // useEffect(() => {\n  //   getGifs( category )\n  //     .then( setImages )\n  // }, [ category ]);\n\n  return (\n    <>\n      <h3 className=\"card animate__animated animate__fadeIn\">{category}</h3>\n      {/* { loading ? 'Cargando....' : 'Data Cargada'} */}\n      { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n      <div className='card-grid'>\n        {data.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n     // setTimeout(() => {\n        setState({\n          data: imgs,\n          loading: false,\n        });\n      //}, 3000);\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState, useEffect } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  //const categories = ['One Punch', 'Goku', 'Samurai'];\n\n  const [categories, setCategories] = useState(['One Punch']);\n\n//   const handleAdd = () => {\n//     //setCategories([...categories, 'HunterVSHunter']);\n//     setCategories( cats => [...cats, 'HunterVSHunter']);\n//   }\n\n  return (\n    <>\n      <h2>GifExperApp</h2>\n      <AddCategory setCategories={ setCategories } />\n      <hr />\n      \n      <ol>\n        {categories.map((category, index) => (\n            <GifGrid \n                key={`category-${index}`}\n                category = { category }\n            />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}